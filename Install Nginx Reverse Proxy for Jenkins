## Nginx is one of the most popular web servers in the world and is responsible for hosting some of the largest and highest-traffic sites on the internet. It is a lightweight choice that can be used as either a web server or reverse proxy. We will configure Nginx as a reverse proxy to direct client requests to Jenkins.

## Update Package Repository and Upgrade Packages¶
   sudo apt update
   sudo apt upgrade

# Installing Nginx
  sudo apt install nginx
  systemctl status nginx

# In order for Nginx to serve this content, it’s necessary to create a server block with the correct directives.

  sudo vi /etc/nginx/sites-available/jenkins.dev.server

# Paste in the following configuration block, which is similar to the default, but updated for our new directory and domain name:
 
 upstream jenkins{
    server 127.0.0.1:8080;
}

server{
    listen      80;
    server_name jenkins.dev.server;

    access_log  /var/log/nginx/jenkins.access.log;
    error_log   /var/log/nginx/jenkins.error.log;

    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    location / {
        proxy_pass  http://jenkins;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_redirect off;

        proxy_set_header    Host            $host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto https;
    }

}

Next, let’s enable the file by creating a link from it to the sites-enabled directory, which Nginx reads from during startup:

  sudo ln -s /etc/nginx/sites-available/jenkins.dev.server /etc/nginx/sites-enabled/

Next, test to make sure that there are no syntax errors in any of your Nginx files:
  sudo nginx -t

If there aren’t any problems, restart Nginx to enable your changes:
  sudo systemctl restart nginx

